

# This file was *autogenerated* from the file LLL_reduction.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7); _sage_const_10 = Integer(10); _sage_const_0 = Integer(0); _sage_const_0p8 = RealNumber('0.8')
def LLL(B, delta):
    n = len(B)
    assert _sage_const_1  / _sage_const_4  < delta < _sage_const_1 
    B = matrix(B)
    i = _sage_const_1 
    G, mu = B.gram_schmidt()
    while i < n:
        for j in range(i - _sage_const_1 , -_sage_const_1 , -_sage_const_1 ):
            print(i, j)
            if mu[i][j].abs() > _sage_const_1  / _sage_const_2 :
                q = mu[i][j].round()
                B[i] -= q * B[j]
                mu[i] -= q * mu[j]
        if B[i].norm() >= (delta - mu[i][i - _sage_const_1 ] ** _sage_const_2 ) * B[i - _sage_const_1 ].norm():
            i += _sage_const_1 
        else:
            B[i - _sage_const_1 ], B[i] = B[i], B[i - _sage_const_1 ]
            mu = GSOUpdate(B, mu, i)
            i = max(i - _sage_const_1 , _sage_const_1 )
    return B


def GSOUpdate(B, mu, i):
    n = B.nrows()
    nu = mu[i][i - _sage_const_1 ]
    b = B[i] + nu ** _sage_const_2  * B[i - _sage_const_1 ]
    print(nu, B[i - _sage_const_1 ], b)
    mu[i][i - _sage_const_1 ] = nu * B[i - _sage_const_1 ] / b
    B[i] = B[i] * B[i - _sage_const_1 ] / b
    B[i - _sage_const_1 ] = b
    for j in range(i - _sage_const_1 ):
        mu[i - _sage_const_1 ][j], mu[i][j] = mu[i][j], mu[i - _sage_const_1 ][j]
    for k in range(i + _sage_const_1 , n):
        t = mu[k][i]
        mu[k][i] = mu[k][i - _sage_const_1 ] - nu * t
        mu[k][i - _sage_const_1 ] = t + mu[i][i - _sage_const_1 ] * mu[k][i]
    return mu


B = [vector([_sage_const_5 , -_sage_const_3 , -_sage_const_7 ]), vector([_sage_const_2 , -_sage_const_7 , -_sage_const_7 ]), vector([_sage_const_3 , -_sage_const_10 , _sage_const_0 ])]
print(LLL(B, _sage_const_0p8 ))

